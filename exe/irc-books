#!/usr/bin/ruby
# frozen_string_literal: true

require 'cinch'
require 'cinch/helpers'
require 'zip'
require 'highline'
require 'shellwords'
require 'tempfile'
require 'fileutils'
require 'irc/books/chooser'
require 'irc/books/msg_parser'
require 'irc/books/search_model'

EBOOKS = '#ebooks'
IRC_HIGHWAY_URL = 'irc.irchighway.net'

def on_next
  Timer(1, shots: 1) do
    yield
  end
end

def send_text_to_channel(channel, text)
  on_next do
    sanitized = Sanitize(text)
    puts "sending: #{sanitized}"
    Channel(channel).send(sanitized)
  end
end

def main
  bot = Cinch::Bot.new do
    model = Irc::Books::SearchModel.new
    chooser = Irc::Books::Chooser.new(model)

    chooser.on_quit do
      bot.quit
      sleep(2)
      exit
    end

    chooser.on_choice do |choice|
      case choice[:command]
      when Irc::Books::Chooser::SEARCH

        search, status = model.add_search(choice[:phrase])

        break unless status

        cmd = "@#{search[:bot]} #{search[:phrase]}"
        send_text_to_channel(EBOOKS, cmd)
      else
        puts "unknown command #{choice}"
      end
    end

    chooser.ask_nickname do |nickname|
      model.nickname = nickname
    end

    configure do |conf|
      conf.server = IRC_HIGHWAY_URL
      conf.channels = [EBOOKS]
      conf.nick = model.nickname
    end

    on :connect do |_msg|
      nil
    end

    on :join do |msg|
      return unless Irc::Books::MsgParser.bot_nick_msg?(bot, msg)

      search_bots = Irc::Books::MsgParser.parse_search_bots_from_topic(msg)
      model.search_bots = search_bots

      on_next do
        chooser.choose
      end
    end

    on :dcc_send do |msg, dcc|
      user = msg.user.nick.downcase
      begin
        filename = dcc.filename
        file = Tempfile.new(filename)
        dcc.accept(file)
        file.close
        chooser.accept_file(user, filename, file)
      end
    end

    on :private do |msg, _dcc|
      search_status = Irc::Books::MsgParser.parse_search_status_msg(msg)
      search, status = search_model.update_search_status(search_status)
      if status
        chooser.notify_search_in_progress(search)
      else
        chooser.notify_no_search_results(search)
      end
    end

    on :message do |_msg|
      nil
    end
  end

  bot.loggers.level = :fatal
  bot.start
end

main
