#!/usr/bin/ruby
# frozen_string_literal: true

require 'cinch'
require 'cinch/helpers'
require 'zip'
require 'highline'
require 'shellwords'
require 'tempfile'
require 'fileutils'
require 'irc/books/chooser'
require 'irc/books/msg_parser'
require 'irc/books/search_model'

EBOOKS = '#ebooks'
IRC_HIGHWAY_URL = 'irc.irchighway.net'

def on_next
  Timer(1, shots: 1) do
    yield
  end
end

def process_chooser_command(cmd)
  return false if cmd == Irc::Books::Chooser::QUIT_CMD

  send_text_to_channel(EBOOKS, cmd)

  true
end

def send_text_to_channel(channel, text)
  on_next do
    Channel(channel).send(Sanitize(text))
  end
end

def main
  bot = Cinch::Bot.new do
    model = Irc::Books::SearchModel.new
    chooser = Irc::Books::Chooser.new(model)
    chooser.ask_nickname do |nickname|
      model.nickname = nickname
    end

    configure do |conf|
      conf.server = IRC_HIGHWAY_URL
      conf.channels = [EBOOKS]
      conf.nick = model.nickname
    end

    on :connect do |_msg|
      nil
    end

    on :join do |msg|
      return if msg.user != bot.nick

      search_bots = Irc::Books::MsgParser.parse_search_bots_from_topic(msg)

      chooser.set_search_bots(search_bots)

      on_next do
        begin
          running = true
          while running == true
            chooser.choose do |cmd|
              running = process_chooser_command(cmd)
            end
          end
        rescue StandardError => e
          puts "error: #{e}"
        ensure
          bot.quit
          sleep(2)
          exit
        end
      end
    end

    on :dcc_send do |msg, dcc|
      user = msg.user.nick.downcase
      begin
        filename = dcc.filename
        file = Tempfile.new(filename)
        dcc.accept(file)
        file.close
        chooser.accept_file(user, filename, file)
      end
    end

    on :private do |msg, _dcc|
      chooser.parse_private_msg(msg.user.nick.downcase, Sanitize(msg.message))
    end

    on :message do |_msg|
      nil
    end
  end

  bot.loggers.level = :fatal
  bot.start
end

main
